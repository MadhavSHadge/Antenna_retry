import sys
import serial
import time
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(858, 573)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Serial setup
        self.ser = serial.Serial('/dev/ttyUSB0', 9600)  # Adjust as necessary
        time.sleep(2)

        # Motor Speed
        self.speed_label = QtWidgets.QLabel(self.centralwidget)
        self.speed_label.setGeometry(QtCore.QRect(10, 10, 100, 20))
        self.speed_label.setText("Set Speed (0-255):")
        self.speed_entry = QtWidgets.QLineEdit(self.centralwidget)
        self.speed_entry.setGeometry(QtCore.QRect(120, 10, 100, 30))
        
        # Direction Controls
        self.forward_button = QtWidgets.QPushButton(self.centralwidget)
        self.forward_button.setGeometry(QtCore.QRect(10, 50, 75, 30))
        self.forward_button.setText("Forward")
        self.forward_button.clicked.connect(self.forward)

        self.backward_button = QtWidgets.QPushButton(self.centralwidget)
        self.backward_button.setGeometry(QtCore.QRect(100, 50, 75, 30))
        self.backward_button.setText("Backward")
        self.backward_button.clicked.connect(self.backward)

        self.stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_button.setGeometry(QtCore.QRect(190, 50, 75, 30))
        self.stop_button.setText("Stop")
        self.stop_button.clicked.connect(self.stop_motor)
        
        # Encoder Controls
        self.read_encoder_button = QtWidgets.QPushButton(self.centralwidget)
        self.read_encoder_button.setGeometry(QtCore.QRect(10, 90, 150, 30))
        self.read_encoder_button.setText("Read Encoder Value")
        self.read_encoder_button.clicked.connect(self.read_encoder)

        self.encoder_value_label = QtWidgets.QLabel(self.centralwidget)
        self.encoder_value_label.setGeometry(QtCore.QRect(180, 90, 200, 30))
        self.encoder_value_label.setText("Current Encoder Value: N/A")

        # Pulse Count
        self.pulse_label = QtWidgets.QLabel(self.centralwidget)
        self.pulse_label.setGeometry(QtCore.QRect(10, 130, 150, 20))
        self.pulse_label.setText("Enter Pulse Count:")
        self.pulse_entry = QtWidgets.QLineEdit(self.centralwidget)
        self.pulse_entry.setGeometry(QtCore.QRect(160, 130, 100, 30))
        
        self.write_pulse_button = QtWidgets.QPushButton(self.centralwidget)
        self.write_pulse_button.setGeometry(QtCore.QRect(270, 130, 100, 30))
        self.write_pulse_button.setText("Set Pulse")
        self.write_pulse_button.clicked.connect(self.write_encoder)

        # Quit button
        self.quit_button = QtWidgets.QPushButton(self.centralwidget)
        self.quit_button.setGeometry(QtCore.QRect(10, 170, 360, 30))
        self.quit_button.setText("Quit")
        self.quit_button.clicked.connect(self.on_closing)

        MainWindow.setCentralWidget(self.centralwidget)
        
    def send_command(self, command):
        self.ser.write(command.encode('utf-8'))

    def forward(self):
        self.send_command('F')

    def backward(self):
        self.send_command('B')

    def stop_motor(self):
        self.send_command('S')

    def read_encoder(self):
        self.send_command('E')
        encoder_value = self.ser.readline().decode().strip()
        self.encoder_value_label.setText(f"Current Encoder Value: {encoder_value}")

    def write_encoder(self):
        try:
            pulses = int(self.pulse_entry.text())
            speed = int(self.speed_entry.text())
            if 0 <= speed <= 255:
                self.send_command(f'P{pulses},{speed}')
                QtWidgets.QMessageBox.information(None, "Pulse Count Set", f"Motor will run for {pulses} pulses at speed {speed}")
            else:
                QtWidgets.QMessageBox.warning(None, "Error", "Speed must be between 0 and 255")
        except ValueError:
            QtWidgets.QMessageBox.warning(None, "Error", "Please enter valid integer values for pulse count and speed")

    def on_closing(self):
        self.ser.close()
        QtWidgets.QApplication.instance().quit()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
